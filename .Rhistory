newprofit <- profit-tax
newprofit
newprofit>mean(newprofit)
mean(newprofit)
fname <- "James"
lname <- "Bond"
fullname <- fname+lname
p <- c (seq(1,9))
q <- c (11:19)
p
q
paste(fname,lname)
t
p <- c (seq(1,9))
q <- c (11:19)
p
q
t <- cbind(p,q)
t
comparison <- function(a+d,b+c){
if (a+d > b+c){
print('a+d is greater than b+c')
}
else if (a+d < b+c) {
print('b+c is greater than a+d')
}
else{
print('a+d is equal to b+c')
}
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10))
comparison <- function(a+d,b+c){
if (a+d > b+c){
print('a+d is greater than b+c')
}
else if (a+d < b+c) {
print('b+c is greater than a+d')
}
else{
print('a+d is equal to b+c')
}
student.df = data.frame( name = c("Sue", "Eva", "Henry", "Jan"),
sex = c("f", "f", "m", "m"),
years = c(21,31,29,19))
student.df
for (x in student.df$years) {
student.df$male.teen <- ifelse(student.df$years<20,T,F)
}
#9
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10))
for (n in 1:nrow(df)){
df$comparison <- ifelse(sum(df[n,1],df[n,2])>sum(df[n,3],df[n,4],'<','>')
}
#1
x <- 39
y <- 22
z <- x-y
#2
vec1 <- c(2,5,8,12,16)
vec2 <- c(5:9)
vec3 <- vec1-vec2
#3
numbers <- seq(2,100,3)
#a
numbers[5]
numbers[10]
numbers[15]
numbers[20]
#b
numbers[10:30]
#4
revenue <- c(14574.49, 7606.46, 12611.41, 13175.41, 8758.65, 8105.44, 11496.28,
9766.09, 10305.32, 17379.96, 10713.97, 15433.50)
expense <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12,
6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue-expense
tax <- round(profit*0.3,2)
tax
newprofit <- profit-tax
newprofit
newprofit>mean(newprofit)
mean(newprofit)
#5
x <- c(4,6,5,7,10,9,4,15)
x<7
#6
p <- c (seq(1,9))
q <- c (11:19)
p
q
t <- cbind(p,q)
t
#7
fname <- "James"
lname <- "Bond"
paste(fname,lname)
#8
student.df = data.frame( name = c("Sue", "Eva", "Henry", "Jan"),
sex = c("f", "f", "m", "m"),
years = c(21,31,29,19))
student.df
for (x in student.df$years) {
student.df$male.teen <- ifelse(student.df$years<20,T,F)
}
student.df
#9
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10))
for (n in 1:nrow(df)){
df$comparison <- ifelse(sum(df[n,1],df[n,2])>sum(df[n,3],df[n,4],'<','>')
}
df$comparison <- ifelse(sum(df[n,1],df[n,2])>sum(df[n,3],df[n,4]),'<','>')
for (n in 1:nrow(df)){
df$comparison <- ifelse(sum(df[n,1],df[n,2])>sum(df[n,3],df[n,4]),'<','>')
}
View(df)
# instal and activate package
library(dplyr)
# instal and activate package
library(dplyr)
newdata <- nycflights13::flights
library(dplyr)
library(tidyverse)
newdata <- nycflights13::flights
# "::" - hÉr hansÄ± bir faylÄ±n vÉ ya funksiyanÄ±n hÉmin package-dÉn gÃ¶tÃ¼rÃ¼lmÉsini Émr edir.
newdata <- nycflights13::flights %>% view()
str(newdata)
newdata %>% str()
newdata %>% glimpse()
newdata %>% filter(month %in% c(11, 12)) %>% View()
newdata %>% select(year, month, day)
newdata %>% filter(month %in% c(11, 12)) %>% View()
install.packages('inspectdf')
newdata %>% mutate(
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours) %>%
select(c(20:22))
newdata %>% mutate(
gain = dep_delay - arr_delay,
hours = air_time / 60,
gain_per_hour = gain / hours)
newdata %>% summarise(delay = mean(dep_delay, na.rm = TRUE))
library(dplyr)
library(readr)
library(tidyverse)
newdata <- read.csv('bina_az.csv', encoding = 'UTF-8') %>% View()
newdata <- newdata %>% rename(Barter=barter_mumkundurmu)
newdata <- newdata %>% rename(valyuta=sign)
new_turbo_data <- newdata
newdata <- newdata %>% rename(Barter=barter_mumkundurmu)
newdata <- newdata %>% rename(valyuta=sign)
new_turbo_data <- newdata
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
library(h2o)
data %>% glimpse()
?mpg
data <- mpg
data %>% glimpse()
data %>%
ggplot
library(tidyverse)
library(data.table)
library(rstudioapi)
library(skimr)
library(inspectdf)
library(mice)
library(plotly)
library(highcharter)
library(recipes)
library(caret)
library(purrr)
library(graphics)
library(Hmisc)
library(glue)
library(h2o)
?mpg
data <- mpg
data %>% glimpse()
data %>%
ggplot
raw %>%
inspect_na() %>%
filter(pcnt<30) %>%
pull(col_name) -> variables
raw <- raw %>% select(variables)
library(tidymodels)
# ------------------------------------ Data preparation  ------------------------------------
raw<-read.csv('daily-minimum-temperatures-in-me (1).csv')
colnames(raw)<-c('Date', 'Temperature')
setwd("C:/Users/Elgiz Gahraman/Desktop/dersler/Week 12/R/DAY 2.1")
setwd("C:/Users/Elgiz Gahraman/Desktop/dersler/Week 12/R/DAY 2.1")
raw<-read.csv('daily-minimum-temperatures-in-me (1).csv')
colnames(raw)<-c('Date', 'Temperature')
raw$Temperature<-gsub("\\?", "", raw$Temperature);
raw$Date<-as.Date(raw$Date, format="%m/%d/%Y");
raw$Temperature<-as.numeric(raw$Temperature)
raw %>% plot_time_series(Date, Temperature);
raw_tk<-raw %>% tk_augment_timeseries_signature();
raw_tk %>% skim()
raw_tk %>% glimpse()
library(tidyverse)
library(lubridate)
library(modeltime)
library(timetk)
library(skimr)
library(h2o)
library(caTools)
library(highcharter)
library(tidymodels)
# ------------------------------------ Data preparation  ------------------------------------
raw<-read.csv('daily-minimum-temperatures-in-me (1).csv')
colnames(raw)<-c('Date', 'Temperature')
raw$Temperature<-gsub("\\?", "", raw$Temperature);
raw$Date<-as.Date(raw$Date, format="%m/%d/%Y");
raw$Temperature<-as.numeric(raw$Temperature)
raw %>% plot_time_series(Date, Temperature);
raw_tk<-raw %>% tk_augment_timeseries_signature();
raw_tk %>% skim()
raw_tk %>% glimpse()
df_tk <- raw_tk %>%
select(-contains("hour"),
-minute,-second,-am.pm) %>%
mutate_if(is.ordered, as.character) %>%
mutate_if(is.character,as_factor)
# ------------------------------------ H2O ------------------------------------
h2o.init()
split<-sample.split(df_tk, SplitRatio=0.8);
train_h2o <- subset(df_tk, split==TRUE) %>% as.h2o()
test_h2o <- subset(df_tk, split==FALSE) %>% as.h2o()
y <- "Temperature"
x <- df_tk %>% select(-Temperature) %>% names()
#1. Building h2o::automl().
model_h2o <- h2o.automl(
x = x, y = y,
training_frame = train_h2o,
validation_frame = test_h2o,
leaderboard_frame = test_h2o,
stopping_metric = "RMSE",
seed = 123, nfolds = 10,
exclude_algos = c("DRF", "GLM","GBM", "XGBoost"),
max_runtime_secs = 600)
model_h2o@leaderboard %>% as.data.frame()
h2o_leader <- model_h2o@leader
pred_h2o <- h2o_leader %>% h2o.predict(test_h2o)
h2o_leader %>%
h2o.rmse(train = T,
valid = T,
xval = T)
error_tbl <- subset(df_tk, split == FALSE) %>%
add_column(pred = pred_h2o %>% as_tibble() %>% pull(predict)) %>%
rename(actual = Temperature) %>%
select(Date,actual,pred)
highchart() %>%
hc_xAxis(categories = error_tbl$Date) %>%
hc_add_series(data=error_tbl$actual, type='line', color='red', name='Actual') %>%
hc_add_series(data=error_tbl$pred, type='line', color='green', name='Predicted') %>%
hc_title(text='Predict')
# 2. -----------Building auto arima model with modeltime::arima_reg()---------------------------
train<-subset(raw, split==TRUE);
test<-subset(raw, split==FALSE);
model_arima<- arima_reg() %>%
set_engine(engine = "auto_arima") %>%
fit(Temperature~ Date, train)
modeltime_table(model_arima) %>% modeltime_calibrate(test) %>%
modeltime_forecast(actual_data=raw) %>% plot_modeltime_forecast(.interactive=TRUE)
modeltime_table(model_arima) %>% modeltime_calibrate(test) %>% modeltime_accuracy();
# --------3. Forecasting temperatures for next year with model which has lower RMSE.-----------------------
#Prediction for the new data
new_data <- seq(as.Date("1991-01-01"), as.Date("1991-12-31"), "days") %>%
as_tibble() %>%
add_column(Temperature=0) %>%
rename(Date=value) %>%
tk_augment_timeseries_signature() %>%
select(-contains("hour"),
-minute,-second,-am.pm) %>%
mutate_if(is.ordered, as.character) %>%
mutate_if(is.character,as_factor)
# Forecast ----
new_data_h2o <- new_data %>% as.h2o()
#predictions for the next year
new_predictions <- h2o_leader %>%
h2o.predict(new_data_h2o) %>%
as_tibble() %>%
add_column(Date=new_data$Date) %>%
select(Date,predict) %>%
rename(Temperature=predict)
raw %>%
bind_rows(new_predictions) %>%
mutate(categories=c(rep('Actual',nrow(raw)),rep('Predicted',nrow(new_predictions)))) %>%
hchart("line", hcaes(Date, Temperature, group = categories)) %>%
hc_title(text='Forecast the for next year') %>%
hc_colors(colors = c('red','green'))
library(tidyverse)
library(lubridate)
library(modeltime)
library(timetk)
library(skimr)
library(h2o)
library(caTools)
library(highcharter)
library(tidymodels)
# ------------------------------------ Data preparation  ------------------------------------
raw<-read.csv('daily-minimum-temperatures-in-me (1).csv')
colnames(raw)<-c('Date', 'Temperature')
raw$Temperature<-gsub("\\?", "", raw$Temperature);
raw$Date<-as.Date(raw$Date, format="%m/%d/%Y");
raw$Temperature<-as.numeric(raw$Temperature)
raw %>% plot_time_series(Date, Temperature);
raw_tk<-raw %>% tk_augment_timeseries_signature();
raw_tk %>% skim()
raw_tk %>% glimpse()
df_tk <- raw_tk %>%
select(-contains("hour"),
-minute,-second,-am.pm) %>%
mutate_if(is.ordered, as.character) %>%
mutate_if(is.character,as_factor)
# ------------------------------------ H2O ------------------------------------
h2o.init()
split<-sample.split(df_tk, SplitRatio=0.8);
train_h2o <- subset(df_tk, split==TRUE) %>% as.h2o()
test_h2o <- subset(df_tk, split==FALSE) %>% as.h2o()
y <- "Temperature"
x <- df_tk %>% select(-Temperature) %>% names()
#1. Building h2o::automl().
model_h2o <- h2o.automl(
x = x, y = y,
training_frame = train_h2o,
validation_frame = test_h2o,
leaderboard_frame = test_h2o,
stopping_metric = "RMSE",
seed = 123, nfolds = 10,
exclude_algos = c("DRF", "GLM","GBM", "XGBoost"),
max_runtime_secs = 600)
model_h2o@leaderboard %>% as.data.frame()
h2o_leader <- model_h2o@leader
pred_h2o <- h2o_leader %>% h2o.predict(test_h2o)
h2o_leader %>%
h2o.rmse(train = T,
valid = T,
xval = T)
error_tbl <- subset(df_tk, split == FALSE) %>%
add_column(pred = pred_h2o %>% as_tibble() %>% pull(predict)) %>%
rename(actual = Temperature) %>%
select(Date,actual,pred)
highchart() %>%
hc_xAxis(categories = error_tbl$Date) %>%
hc_add_series(data=error_tbl$actual, type='line', color='red', name='Actual') %>%
hc_add_series(data=error_tbl$pred, type='line', color='green', name='Predicted') %>%
hc_title(text='Predict')
# 2. -----------Building auto arima model with modeltime::arima_reg()---------------------------
train<-subset(raw, split==TRUE);
test<-subset(raw, split==FALSE);
model_arima<- arima_reg() %>%
set_engine(engine = "auto_arima") %>%
fit(Temperature~ Date, train)
modeltime_table(model_arima) %>% modeltime_calibrate(test) %>%
modeltime_forecast(actual_data=raw) %>% plot_modeltime_forecast(.interactive=TRUE)
modeltime_table(model_arima) %>% modeltime_calibrate(test) %>% modeltime_accuracy();
# --------3. Forecasting temperatures for next year with model which has lower RMSE.-----------------------
#Prediction for the new data
new_data <- seq(as.Date("1991-01-01"), as.Date("1991-12-31"), "days") %>%
as_tibble() %>%
add_column(Temperature=0) %>%
rename(Date=value) %>%
tk_augment_timeseries_signature() %>%
select(-contains("hour"),
-minute,-second,-am.pm) %>%
mutate_if(is.ordered, as.character) %>%
mutate_if(is.character,as_factor)
# Forecast ----
new_data_h2o <- new_data %>% as.h2o()
#predictions for the next year
new_predictions <- h2o_leader %>%
h2o.predict(new_data_h2o) %>%
as_tibble() %>%
add_column(Date=new_data$Date) %>%
select(Date,predict) %>%
rename(Temperature=predict)
raw %>%
bind_rows(new_predictions) %>%
mutate(categories=c(rep('Actual',nrow(raw)),rep('Predicted',nrow(new_predictions)))) %>%
hchart("line", hcaes(Date, Temperature, group = categories)) %>%
hc_title(text='Forecast the for next year') %>%
hc_colors(colors = c('red','green'))
raw %>%
bind_rows(new_predictions) %>%
mutate(categories=c(rep('Actual',nrow(raw)),rep('Predicted',nrow(new_predictions)))) %>%
hchart("line", hcaes(Date, Temperature, group = categories)) %>%
hc_title(text='Forecast the for next year') %>%
hc_colors(colors = c('blue','black'))
raw %>%
bind_rows(new_predictions) %>%
mutate(categories=c(rep('Actual',nrow(raw)),rep('Predicted',nrow(new_predictions)))) %>%
hchart("line", hcaes(Date, Temperature, group = categories)) %>%
hc_title(text='Forecast the for next year') %>%
hc_colors(colors = c('blue','red'))
library(tidyverse)
library(lubridate)
library(modeltime)
library(timetk)
library(skimr)
library(h2o)
library(caTools)
library(highcharter)
library(tidymodels)
#  Data preparation
raw<-read.csv('daily-minimum-temperatures-in-me (1).csv')
colnames(raw)<-c('Date', 'Temperature')
raw$Temperature<-gsub("\\?", "", raw$Temperature);
raw$Date<-as.Date(raw$Date, format="%m/%d/%Y");
raw$Temperature<-as.numeric(raw$Temperature)
raw %>% plot_time_series(Date, Temperature);
raw_tk<-raw %>% tk_augment_timeseries_signature();
raw_tk %>% skim()
raw_tk %>% glimpse()
df_tk <- raw_tk %>%
select(-contains("hour"),
-minute,-second,-am.pm) %>%
mutate_if(is.ordered, as.character) %>%
mutate_if(is.character,as_factor)
# ------------------------------------ H2O ------------------------------------
h2o.init()
split<-sample.split(df_tk, SplitRatio=0.8);
train_h2o <- subset(df_tk, split==TRUE) %>% as.h2o()
test_h2o <- subset(df_tk, split==FALSE) %>% as.h2o()
y <- "Temperature"
x <- df_tk %>% select(-Temperature) %>% names()
#1. Building h2o::automl().
model_h2o <- h2o.automl(
x = x, y = y,
training_frame = train_h2o,
validation_frame = test_h2o,
leaderboard_frame = test_h2o,
stopping_metric = "RMSE",
seed = 123, nfolds = 10,
exclude_algos = c("DRF", "GLM","GBM", "XGBoost"),
max_runtime_secs = 720)
model_h2o@leaderboard %>% as.data.frame()
h2o_leader <- model_h2o@leader
pred_h2o <- h2o_leader %>% h2o.predict(test_h2o)
h2o_leader %>%
h2o.rmse(train = T,
valid = T,
xval = T)
error_tbl <- subset(df_tk, split == FALSE) %>%
add_column(pred = pred_h2o %>% as_tibble() %>% pull(predict)) %>%
rename(actual = Temperature) %>%
select(Date,actual,pred)
highchart() %>%
hc_xAxis(categories = error_tbl$Date) %>%
hc_add_series(data=error_tbl$actual, type='line', color='red', name='Actual') %>%
hc_add_series(data=error_tbl$pred, type='line', color='green', name='Predicted') %>%
hc_title(text='Predict')
# 2. Building auto arima model with modeltime::arima_reg()
train<-subset(raw, split==TRUE);
test<-subset(raw, split==FALSE);
model_arima<- arima_reg() %>%
set_engine(engine = "auto_arima") %>%
fit(Temperature~ Date, train)
modeltime_table(model_arima) %>% modeltime_calibrate(test) %>%
modeltime_forecast(actual_data=raw) %>% plot_modeltime_forecast(.interactive=TRUE)
modeltime_table(model_arima) %>% modeltime_calibrate(test) %>% modeltime_accuracy();
# 3. Forecasting temperatures for next year with model which has lower RMSE.
#Prediction for the new data
new_data <- seq(as.Date("1991-01-01"), as.Date("1991-12-31"), "days") %>%
as_tibble() %>%
add_column(Temperature=0) %>%
rename(Date=value) %>%
tk_augment_timeseries_signature() %>%
select(-contains("hour"),
-minute,-second,-am.pm) %>%
mutate_if(is.ordered, as.character) %>%
mutate_if(is.character,as_factor)
# Forecast ----
new_data_h2o <- new_data %>% as.h2o()
#predictions for the next year
new_predictions <- h2o_leader %>%
h2o.predict(new_data_h2o) %>%
as_tibble() %>%
add_column(Date=new_data$Date) %>%
select(Date,predict) %>%
rename(Temperature=predict)
raw %>%
bind_rows(new_predictions) %>%
mutate(categories=c(rep('Actual',nrow(raw)),rep('Predicted',nrow(new_predictions)))) %>%
hchart("line", hcaes(Date, Temperature, group = categories)) %>%
hc_title(text='Forecast the for next year') %>%
hc_colors(colors = c('blue','red'))
